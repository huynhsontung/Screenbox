<Page
    x:Class="Screenbox.Pages.SongSearchResultPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:commands="using:Screenbox.Commands"
    xmlns:controls="using:Screenbox.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:interactions="using:Screenbox.Controls.Interactions"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:muxc="using:Microsoft.UI.Xaml.Controls"
    xmlns:strings="using:Screenbox.Strings"
    xmlns:triggers="using:CommunityToolkit.WinUI"
    xmlns:ui="using:CommunityToolkit.WinUI"
    mc:Ignorable="d">
    <Page.Resources>
        <MenuFlyout x:Name="ItemFlyout">
            <MenuFlyoutItem
                Command="{x:Bind ViewModel.PlayCommand}"
                CommandParameter="{Binding}"
                Icon="{ui:FontIcon FontFamily={StaticResource ScreenboxSymbolThemeFontFamily},
                                   Glyph={StaticResource PlayGlyph}}"
                Text="{strings:Resources Key=Play}" />
            <MenuFlyoutItem
                Command="{x:Bind Common.PlayNextCommand}"
                CommandParameter="{Binding}"
                Icon="{ui:FontIcon FontFamily={StaticResource ScreenboxSymbolThemeFontFamily},
                                   Glyph={StaticResource PlayAddGlyph}}"
                Text="{strings:Resources Key=PlayNext}" />
            <MenuFlyoutSeparator />
            <MenuFlyoutItem
                Command="{StaticResource ShowPropertiesCommand}"
                CommandParameter="{Binding}"
                Icon="{ui:FontIcon Glyph=&#xE946;}"
                Text="{strings:Resources Key=Properties}" />
            <MenuFlyoutItem
                Command="{x:Bind Common.OpenAlbumCommand}"
                CommandParameter="{Binding Album}"
                Icon="{ui:FontIcon Glyph=&#xE93C;}"
                Text="{strings:Resources Key=ShowAlbum}"
                Visibility="{Binding Album, Converter={StaticResource EmptyObjectToVisibilityConverter}}" />
            <MenuFlyoutItem
                Command="{x:Bind Common.OpenArtistCommand}"
                CommandParameter="{Binding MainArtist}"
                Icon="{ui:FontIcon Glyph=&#xE77B;}"
                Text="{strings:Resources Key=ShowArtist}"
                Visibility="{Binding MainArtist, Converter={StaticResource EmptyObjectToVisibilityConverter}}" />
            <MenuFlyoutSeparator Visibility="{x:Bind Common.IsAdvancedModeEnabled}" />
            <MenuFlyoutItem
                CommandParameter="{Binding}"
                Icon="{ui:SymbolIcon Symbol=Setting}"
                Text="{strings:Resources Key=SetPlaybackOptions}"
                Visibility="{x:Bind Common.IsAdvancedModeEnabled}">
                <MenuFlyoutItem.Command>
                    <commands:SetPlaybackOptionsCommand PlayCommand="{x:Bind ViewModel.PlayCommand}" />
                </MenuFlyoutItem.Command>
            </MenuFlyoutItem>
        </MenuFlyout>
    </Page.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <TextBlock
            x:Name="HeaderText"
            Grid.Row="0"
            MinHeight="{StaticResource PageHeaderMinHeight}"
            Margin="{StaticResource BottomMediumMargin}"
            Padding="{StaticResource ContentPagePadding}"
            MaxLines="2"
            Style="{StaticResource TitleMediumTextBlockStyle}"
            Text="{x:Bind strings:Resources.SearchResultSongHeader(ViewModel.SearchQuery), FallbackValue={}}">
            <interactivity:Interaction.Behaviors>
                <interactions:OverflowTextToolTipBehavior />
            </interactivity:Interaction.Behaviors>
        </TextBlock>

        <ListView
            x:Name="SongListView"
            Grid.Row="1"
            Margin="{StaticResource TopLargeMargin}"
            Padding="{StaticResource ContentPagePadding}"
            ui:ListViewExtensions.ItemContainerStretchDirection="Horizontal"
            ui:ScrollViewerExtensions.VerticalScrollBarMargin="{x:Bind Common.ScrollBarMargin, Mode=OneWay}"
            IsItemClickEnabled="True"
            ItemsSource="{x:Bind ViewModel.SearchResult.Songs, FallbackValue={x:Null}}"
            SelectionMode="None"
            Style="{StaticResource MediaListViewStyle}">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <controls:MediaListViewItem PlayCommand="{Binding DataContext.PlaySongCommand, ElementName=SongListView, FallbackValue={x:Null}}" />
                </DataTemplate>
            </ListView.ItemTemplate>
            <ListView.Footer>
                <Grid Height="{x:Bind Common.FooterBottomPaddingHeight, Mode=OneWay}" />
            </ListView.Footer>
            <interactivity:Interaction.Behaviors>
                <interactions:AlternatingListViewBehavior
                    AlternateBackground="{ThemeResource CardBackgroundFillColorDefaultBrush}"
                    AlternateBorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                    AlternateBorderThickness="1" />
                <interactions:ListViewContextTriggerBehavior Flyout="{x:Bind ItemFlyout}" />
            </interactivity:Interaction.Behaviors>
        </ListView>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="NavigationViewStates">
                <VisualState x:Name="Expanded" />
                <VisualState x:Name="Compact" />
                <VisualState x:Name="Minimal">
                    <VisualState.StateTriggers>
                        <triggers:IsEqualStateTrigger Value="{x:Bind Common.NavigationViewDisplayMode, Mode=OneWay}">
                            <triggers:IsEqualStateTrigger.To>
                                <muxc:NavigationViewDisplayMode>Minimal</muxc:NavigationViewDisplayMode>
                            </triggers:IsEqualStateTrigger.To>
                        </triggers:IsEqualStateTrigger>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="HeaderText.Padding" Value="{StaticResource ContentPageMinimalPadding}" />
                        <Setter Target="SongListView.Padding" Value="{StaticResource ContentPageMinimalPadding}" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</Page>
