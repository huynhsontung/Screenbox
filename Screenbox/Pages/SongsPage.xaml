<Page
    x:Class="Screenbox.Pages.SongsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:commands="using:Screenbox.Commands"
    xmlns:controls="using:Screenbox.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:interactions="using:Screenbox.Controls.Interactions"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:muxc="using:Microsoft.UI.Xaml.Controls"
    xmlns:strings="using:Screenbox.Strings"
    xmlns:triggers="using:CommunityToolkit.WinUI"
    xmlns:ui="using:CommunityToolkit.WinUI"
    mc:Ignorable="d">

    <Page.Resources>
        <ResourceDictionary>
            <CollectionViewSource
                x:Name="SongsSource"
                IsSourceGrouped="True"
                Source="{x:Bind ViewModel.GroupedSongs}" />

            <DataTemplate x:Key="GroupHeaderTemplate">
                <TextBlock
                    FontWeight="SemiBold"
                    Text="{Binding Key}"
                    TextTrimming="CharacterEllipsis" />
            </DataTemplate>

            <MenuFlyout x:Name="ItemFlyout">
                <MenuFlyoutItem
                    Command="{x:Bind ViewModel.PlayCommand}"
                    CommandParameter="{Binding}"
                    Icon="{ui:FontIcon FontFamily={StaticResource ScreenboxSymbolThemeFontFamily},
                                       Glyph={StaticResource PlayGlyph}}"
                    Text="{strings:Resources Key=Play}" />
                <MenuFlyoutItem
                    Command="{x:Bind Common.PlayNextCommand}"
                    CommandParameter="{Binding}"
                    Icon="{ui:FontIcon FontFamily={StaticResource ScreenboxSymbolThemeFontFamily},
                                       Glyph={StaticResource PlayAddGlyph}}"
                    Text="{strings:Resources Key=PlayNext}" />
                <MenuFlyoutSeparator />
                <MenuFlyoutItem
                    Command="{StaticResource ShowPropertiesCommand}"
                    CommandParameter="{Binding}"
                    Icon="{ui:FontIcon Glyph=&#xE946;}"
                    Text="{strings:Resources Key=Properties}" />
                <MenuFlyoutItem
                    Command="{x:Bind Common.OpenAlbumCommand}"
                    CommandParameter="{Binding Album}"
                    Icon="{ui:FontIcon Glyph=&#xE93C;}"
                    Text="{strings:Resources Key=ShowAlbum}"
                    Visibility="{Binding Album, Converter={StaticResource EmptyObjectToVisibilityConverter}}" />
                <MenuFlyoutItem
                    Command="{x:Bind Common.OpenArtistCommand}"
                    CommandParameter="{Binding MainArtist}"
                    Icon="{ui:FontIcon Glyph=&#xE77B;}"
                    Text="{strings:Resources Key=ShowArtist}"
                    Visibility="{Binding MainArtist, Converter={StaticResource EmptyObjectToVisibilityConverter}}" />
                <MenuFlyoutSeparator Visibility="{x:Bind Common.IsAdvancedModeEnabled}" />
                <MenuFlyoutItem
                    CommandParameter="{Binding}"
                    Icon="{ui:SymbolIcon Symbol=Setting}"
                    Text="{strings:Resources Key=SetPlaybackOptions}"
                    Visibility="{x:Bind Common.IsAdvancedModeEnabled}">
                    <MenuFlyoutItem.Command>
                        <commands:SetPlaybackOptionsCommand PlayCommand="{x:Bind ViewModel.PlayCommand}" />
                    </MenuFlyoutItem.Command>
                </MenuFlyoutItem>
            </MenuFlyout>
        </ResourceDictionary>
    </Page.Resources>

    <interactivity:Interaction.Behaviors>
        <interactions:AutoFocusBehavior />
    </interactivity:Interaction.Behaviors>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Button
            x:Name="ShufflePlayButton"
            Grid.Row="0"
            Margin="{StaticResource ContentPagePadding}"
            AccessKey="{strings:KeyboardResources Key=CommandShuffleAndPlayKey}"
            AutomationProperties.Name="{strings:Resources Key=ShuffleAndPlay}"
            Command="{x:Bind ViewModel.ShuffleAndPlayCommand}"
            Style="{StaticResource AccentButtonStyle}">
            <StackPanel Orientation="Horizontal">
                <FontIcon
                    Margin="{StaticResource IconButtonStandardIconMargin}"
                    FontFamily="{StaticResource ScreenboxSymbolThemeFontFamily}"
                    Glyph="{StaticResource ShuffleGlyph}"
                    MirroredWhenRightToLeft="True" />
                <TextBlock Margin="8,0,0,0" Text="{strings:Resources Key=ShuffleAndPlay}" />
            </StackPanel>
        </Button>

        <muxc:DropDownButton
            x:Name="SortByButton"
            Grid.Row="0"
            Margin="{StaticResource ContentPagePadding}"
            HorizontalAlignment="Right"
            AccessKey="{strings:KeyboardResources Key=CommandSortByKey}"
            AutomationProperties.Name="{x:Bind SortByText.Text}"
            Background="Transparent"
            BorderBrush="Transparent">
            <muxc:DropDownButton.Flyout>
                <MenuFlyout x:Name="SortByFlyout" Placement="BottomEdgeAlignedRight">
                    <muxc:RadioMenuFlyoutItem
                        Command="{x:Bind ViewModel.SetSortByCommand}"
                        CommandParameter="title"
                        GroupName="SortOrder"
                        IsChecked="True"
                        Tag="title"
                        Text="{strings:Resources Key=PropertyTitle}" />
                    <muxc:RadioMenuFlyoutItem
                        Command="{x:Bind ViewModel.SetSortByCommand}"
                        CommandParameter="album"
                        GroupName="SortOrder"
                        Tag="album"
                        Text="{strings:Resources Key=PropertyAlbum}" />
                    <muxc:RadioMenuFlyoutItem
                        Command="{x:Bind ViewModel.SetSortByCommand}"
                        CommandParameter="artist"
                        GroupName="SortOrder"
                        Tag="artist"
                        Text="{strings:Resources Key=Artist}" />
                    <muxc:RadioMenuFlyoutItem
                        Command="{x:Bind ViewModel.SetSortByCommand}"
                        CommandParameter="year"
                        GroupName="SortOrder"
                        Tag="year"
                        Text="{strings:Resources Key=ReleasedYear}" />
                    <muxc:RadioMenuFlyoutItem
                        Command="{x:Bind ViewModel.SetSortByCommand}"
                        CommandParameter="dateAdded"
                        GroupName="SortOrder"
                        Tag="dateAdded"
                        Text="{strings:Resources Key=DateAdded}" />
                </MenuFlyout>
            </muxc:DropDownButton.Flyout>
            <StackPanel Orientation="Horizontal">
                <FontIcon Margin="0,0,8,0" Glyph="&#xE8CB;" />
                <TextBlock x:Name="SortByText"><Run Text="{strings:Resources Key=SortBy}" /><Run Text=":&#160;" /></TextBlock>
                <TextBlock Foreground="{ThemeResource AccentTextFillColorPrimaryBrush}" Text="{x:Bind GetSortByText(ViewModel.SortBy), Mode=OneWay}" />
            </StackPanel>
        </muxc:DropDownButton>

        <muxc:ProgressBar
            Grid.Row="1"
            Margin="{StaticResource TopMediumMargin}"
            VerticalAlignment="Top"
            IsIndeterminate="True"
            Visibility="{x:Bind ViewModel.IsLoading, Mode=OneWay}" />

        <SemanticZoom Grid.Row="1" Margin="{StaticResource TopLargeMargin}">
            <SemanticZoom.ZoomedInView>
                <ListView
                    x:Name="SongListView"
                    Padding="{StaticResource ContentPagePadding}"
                    ui:ListViewExtensions.ItemContainerStretchDirection="Horizontal"
                    ui:ScrollViewerExtensions.VerticalScrollBarMargin="{x:Bind Common.ScrollBarMargin, Mode=OneWay}"
                    IsItemClickEnabled="True"
                    ItemsSource="{x:Bind SongsSource.View, Mode=OneWay}"
                    Loaded="SongListView_OnLoaded"
                    ScrollViewer.IsVerticalScrollChainingEnabled="False"
                    SelectionMode="None"
                    Style="{StaticResource MediaListViewStyle}">
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <controls:MediaListViewItem PlayCommand="{Binding DataContext.PlayCommand, ElementName=SongListView}" />
                        </DataTemplate>
                    </ListView.ItemTemplate>
                    <ListView.GroupStyle>
                        <GroupStyle
                            HeaderContainerStyle="{StaticResource MediaListViewHeaderItemStyle}"
                            HeaderTemplate="{StaticResource GroupHeaderTemplate}"
                            HidesIfEmpty="True" />
                    </ListView.GroupStyle>
                    <ListView.Footer>
                        <Border Height="{x:Bind Common.FooterBottomPaddingHeight, Mode=OneWay}" />
                    </ListView.Footer>
                    <interactivity:Interaction.Behaviors>
                        <interactions:AlternatingListViewBehavior
                            AlternateBackground="{ThemeResource CardBackgroundFillColorDefaultBrush}"
                            AlternateBorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                            AlternateBorderThickness="1" />
                        <interactions:ListViewContextTriggerBehavior Flyout="{x:Bind ItemFlyout}" />
                        <interactions:BringIntoViewWithOffsetBehavior FromBottom="{x:Bind Common.FooterBottomPaddingHeight, Mode=OneWay}" />
                        <interactions:FocusOnItemClickBehavior />
                    </interactivity:Interaction.Behaviors>
                </ListView>
            </SemanticZoom.ZoomedInView>

            <SemanticZoom.ZoomedOutView>
                <GridView
                    x:Name="GroupOverview"
                    Margin="{x:Bind Common.FooterBottomPaddingMargin, Mode=OneWay}"
                    Padding="{StaticResource ContentPagePadding}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    ui:ListViewExtensions.ItemContainerStretchDirection="Horizontal"
                    ItemTemplate="{StaticResource GroupOverviewLetterItemTemplate}"
                    ItemsSource="{x:Bind SongsSource.View.CollectionGroups}"
                    SelectionMode="None">
                    <GridView.Resources>
                        <StaticResource x:Key="ButtonBackgroundDisabled" ResourceKey="ControlFillColorTransparentBrush" />
                        <StaticResource x:Key="ButtonBorderBrushDisabled" ResourceKey="ControlFillColorTransparentBrush" />
                    </GridView.Resources>
                    <GridView.ItemsPanel>
                        <ItemsPanelTemplate>
                            <ItemsWrapGrid MaximumRowsOrColumns="8" Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </GridView.ItemsPanel>
                    <interactivity:Interaction.Behaviors>
                        <interactions:GroupingOverviewBehavior GroupType="{x:Bind ViewModel.SortBy, Mode=OneWay}" />
                    </interactivity:Interaction.Behaviors>
                </GridView>
            </SemanticZoom.ZoomedOutView>
        </SemanticZoom>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="NavigationViewStates">
                <VisualState x:Name="Expanded" />
                <VisualState x:Name="Compact" />
                <VisualState x:Name="Minimal">
                    <VisualState.StateTriggers>
                        <triggers:IsEqualStateTrigger Value="{x:Bind Common.NavigationViewDisplayMode, Mode=OneWay}">
                            <triggers:IsEqualStateTrigger.To>
                                <muxc:NavigationViewDisplayMode>Minimal</muxc:NavigationViewDisplayMode>
                            </triggers:IsEqualStateTrigger.To>
                        </triggers:IsEqualStateTrigger>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="ShufflePlayButton.Margin" Value="{StaticResource ContentPageMinimalPadding}" />
                        <Setter Target="SortByButton.Margin" Value="{StaticResource ContentPageMinimalPadding}" />
                        <Setter Target="SortByText.Visibility" Value="Collapsed" />
                        <Setter Target="SongListView.Padding" Value="{StaticResource ContentPageMinimalPadding}" />
                        <Setter Target="GroupOverview.Padding" Value="{StaticResource ContentPageMinimalPadding}" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup x:Name="SortByStates">
                <VisualState x:Name="SortByTitle" />
                <VisualState x:Name="SortByAlbum">
                    <VisualState.Setters>
                        <Setter Target="GroupOverview.HorizontalAlignment" Value="Stretch" />
                        <Setter Target="GroupOverview.VerticalAlignment" Value="Stretch" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SortByArtist">
                    <VisualState.Setters>
                        <Setter Target="GroupOverview.HorizontalAlignment" Value="Stretch" />
                        <Setter Target="GroupOverview.VerticalAlignment" Value="Stretch" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</Page>
