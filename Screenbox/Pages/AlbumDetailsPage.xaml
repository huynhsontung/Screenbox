<Page
    x:Class="Screenbox.Pages.AlbumDetailsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:commands="using:Screenbox.Commands"
    xmlns:controls="using:Screenbox.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:extensions="using:Screenbox.Extensions"
    xmlns:interactions="using:Screenbox.Controls.Interactions"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:local="using:Screenbox.Pages"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:muxc="using:Microsoft.UI.Xaml.Controls"
    xmlns:strings="using:Screenbox.Strings"
    xmlns:triggers="using:CommunityToolkit.WinUI"
    xmlns:ui="using:CommunityToolkit.WinUI"
    Loaded="AlbumDetailsPage_OnLoaded"
    mc:Ignorable="d">

    <Page.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="ms-appx:///Styles/CommandBar.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <MenuFlyout x:Name="ItemFlyout">
                <MenuFlyoutItem
                    Command="{x:Bind ViewModel.PlayCommand}"
                    CommandParameter="{Binding}"
                    Icon="{ui:FontIcon FontFamily={StaticResource ScreenboxSymbolThemeFontFamily},
                                       Glyph={StaticResource PlayGlyph}}"
                    Text="{strings:Resources Key=Play}" />
                <MenuFlyoutItem
                    Command="{x:Bind Common.PlayNextCommand}"
                    CommandParameter="{Binding}"
                    Icon="{ui:FontIcon FontFamily={StaticResource ScreenboxSymbolThemeFontFamily},
                                       Glyph={StaticResource PlayAddGlyph}}"
                    Text="{strings:Resources Key=PlayNext}" />
                <MenuFlyoutSeparator />
                <MenuFlyoutItem
                    Command="{StaticResource ShowPropertiesCommand}"
                    CommandParameter="{Binding}"
                    Icon="{ui:FontIcon Glyph=&#xE946;}"
                    Text="{strings:Resources Key=Properties}" />
                <MenuFlyoutItem
                    Command="{x:Bind Common.OpenArtistCommand}"
                    CommandParameter="{Binding MainArtist}"
                    Icon="{ui:FontIcon Glyph=&#xE77B;}"
                    Text="{strings:Resources Key=ShowArtist}"
                    Visibility="{Binding MainArtist, Converter={StaticResource EmptyObjectToVisibilityConverter}}" />
                <MenuFlyoutSeparator Visibility="{x:Bind Common.IsAdvancedModeEnabled}" />
                <MenuFlyoutItem
                    CommandParameter="{Binding}"
                    Icon="{ui:SymbolIcon Symbol=Setting}"
                    Text="{strings:Resources Key=SetPlaybackOptions}"
                    Visibility="{x:Bind Common.IsAdvancedModeEnabled}">
                    <MenuFlyoutItem.Command>
                        <commands:SetPlaybackOptionsCommand PlayCommand="{x:Bind ViewModel.PlayCommand}" />
                    </MenuFlyoutItem.Command>
                </MenuFlyoutItem>
            </MenuFlyout>
        </ResourceDictionary>
    </Page.Resources>

    <Grid x:Name="RootGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Grid
            x:Name="BackgroundHost"
            Grid.Row="0"
            Margin="0,-136,0,0"
            FlowDirection="LeftToRight"
            SizeChanged="BackgroundHost_OnSizeChanged" />

        <Grid
            x:Name="Header"
            Grid.Row="0"
            Margin="0,0,0,-80"
            Padding="{StaticResource ContentPagePadding}"
            Canvas.ZIndex="1">
            <!--  To prevent the background border from appearing squashed after scaling, use a rectangle instead of a border to increase the Y radius.  -->
            <Rectangle
                x:Name="BackgroundAcrylic"
                Fill="{ThemeResource AcrylicInAppFillColorDefaultBrush}"
                RadiusX="8"
                RadiusY="12"
                Shadow="{StaticResource ElevationThemeShadow}"
                Stroke="{ThemeResource ControlElevationBorderBrush}"
                StrokeThickness="1"
                Translation="0,0,32" />

            <Grid x:Name="ContentContainer">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <Grid
                    x:Name="CoverArt"
                    Grid.Column="0"
                    Width="192"
                    Height="192"
                    Margin="0,0,20,0"
                    BorderBrush="{ThemeResource ControlStrokeColorSecondaryBrush}"
                    BorderThickness="1"
                    CornerRadius="{StaticResource OverlayCornerRadius}"
                    FlowDirection="LeftToRight"
                    Shadow="{StaticResource ElevationThemeShadow}"
                    SizeChanged="AlbumArt_OnSizeChanged"
                    Translation="0,0,16">
                    <Grid.Background>
                        <ImageBrush ImageSource="{x:Bind ViewModel.Source.AlbumArt, Mode=OneWay, FallbackValue={x:Null}}" Stretch="UniformToFill" />
                    </Grid.Background>
                    <Border
                        Background="{ThemeResource SolidBackgroundFillColorSecondaryBrush}"
                        CornerRadius="{x:Bind CoverArt.CornerRadius, Mode=OneWay}"
                        Visibility="{x:Bind ViewModel.Source.AlbumArt, Mode=OneWay, Converter={StaticResource EmptyObjectToVisibilityConverter}, ConverterParameter=true, FallbackValue=Visible}">
                        <FontIcon
                            x:Name="CoverArtIcon"
                            FontSize="64"
                            Foreground="{ThemeResource TextFillColorSecondaryBrush}"
                            Glyph="&#xE93C;" />
                    </Border>
                </Grid>

                <StackPanel
                    x:Name="TextPanel"
                    Grid.Column="1"
                    Orientation="Vertical">
                    <TextBlock
                        x:Name="TitleText"
                        Style="{StaticResource TitleMediumTextBlockStyle}"
                        Text="{x:Bind ViewModel.Source.Name, FallbackValue={x:Null}}"
                        TextWrapping="NoWrap">
                        <interactivity:Interaction.Behaviors>
                            <interactions:OverflowTextToolTipBehavior />
                        </interactivity:Interaction.Behaviors>
                    </TextBlock>

                    <TextBlock
                        x:Name="SubtitleText"
                        Margin="0,8,0,0"
                        FontWeight="Normal"
                        Style="{StaticResource SubtitleTextBlockStyle}"
                        Text="{x:Bind ViewModel.Source.ArtistName, FallbackValue={x:Null}}"
                        TextWrapping="NoWrap">
                        <interactivity:Interaction.Behaviors>
                            <interactions:OverflowTextToolTipBehavior />
                        </interactivity:Interaction.Behaviors>
                    </TextBlock>

                    <TextBlock
                        x:Name="CaptionText"
                        Margin="0,12,0,0"
                        Foreground="{ThemeResource TextFillColorTertiaryBrush}"
                        Style="{StaticResource BodyTextBlockStyle}"
                        Text="{x:Bind local:AlbumDetailsPage.GetSubtext(ViewModel.Year, ViewModel.SongsCount, ViewModel.TotalDuration), Mode=OneWay}"
                        TextWrapping="NoWrap">
                        <interactivity:Interaction.Behaviors>
                            <interactions:OverflowTextToolTipBehavior />
                        </interactivity:Interaction.Behaviors>
                    </TextBlock>

                    <!--  Wrap the CommandBar in a Grid which will host the translation animation, this ensures that opening the overflow popup does not reset the command bar position.  -->
                    <Grid x:Name="ButtonPanel">
                        <CommandBar
                            Margin="-8,8,0,0"
                            HorizontalAlignment="Left"
                            extensions:CommandBarExtensions.MoreButtonStyle="{StaticResource EllipsisDefaultButtonStyle}"
                            AccessKey="{strings:KeyboardResources Key=CommandMoreOptionsKey}"
                            DefaultLabelPosition="Right">
                            <CommandBar.Resources>
                                <StaticResource x:Key="CommandBarBackground" ResourceKey="ControlFillColorTransparentBrush" />
                                <StaticResource x:Key="CommandBarBackgroundOpen" ResourceKey="ControlFillColorTransparentBrush" />
                                <StaticResource x:Key="CommandBarBorderBrushOpen" ResourceKey="ControlFillColorTransparentBrush" />
                                <StaticResource x:Key="CommandBarHighContrastBorder" ResourceKey="ControlFillColorTransparentBrush" />

                                <Thickness x:Key="AppBarEllipsisButtonInnerBorderMargin">4,8,4,8</Thickness>
                                <!--  Adjust margin to match the size and layout of the default button  -->
                                <Thickness x:Key="AppBarButtonContentViewboxMargin">16,16,0,16</Thickness>
                                <Thickness x:Key="AppBarButtonTextLabelOnRightMargin">8,14,16,15</Thickness>
                                <Thickness x:Key="AppBarButtonInnerBorderMargin">4,8,4,8</Thickness>
                            </CommandBar.Resources>

                            <AppBarButton
                                AccessKey="{strings:KeyboardResources Key=CommandPlayKey}"
                                Command="{x:Bind ViewModel.PlayCommand}"
                                CommandParameter="{x:Bind ViewModel.SortedItems, Mode=OneWay, Converter={StaticResource FirstOrDefaultConverter}}"
                                Icon="{ui:FontIcon FontFamily={StaticResource ScreenboxSymbolThemeFontFamily},
                                                   Glyph={StaticResource PlayGlyph}}"
                                Label="{strings:Resources Key=Play}"
                                Style="{StaticResource AccentButtonAppBarButtonStyle}">
                                <interactivity:Interaction.Behaviors>
                                    <interactions:AutoFocusBehavior />
                                </interactivity:Interaction.Behaviors>
                            </AppBarButton>

                            <AppBarButton
                                AccessKey="{strings:KeyboardResources Key=CommandShuffleAndPlayKey}"
                                Command="{x:Bind ViewModel.ShuffleAndPlayCommand}"
                                Icon="{ui:FontIcon FontFamily={StaticResource ScreenboxSymbolThemeFontFamily},
                                                   Glyph={StaticResource ShuffleGlyph},
                                                   MirroredWhenRightToLeft=True}"
                                Label="{strings:Resources Key=ShuffleAndPlay}"
                                Style="{StaticResource DefaultButtonAppBarButtonStyle}" />
                        </CommandBar>
                    </Grid>
                </StackPanel>
            </Grid>
        </Grid>

        <ListView
            x:Name="ItemList"
            Grid.Row="1"
            Padding="{StaticResource ContentPagePadding}"
            ui:ListViewExtensions.ItemContainerStretchDirection="Horizontal"
            ui:ScrollViewerExtensions.VerticalScrollBarMargin="{x:Bind GetScrollbarVerticalMargin(Common.ScrollBarMargin), Mode=OneWay}"
            IsItemClickEnabled="True"
            ItemsSource="{x:Bind ViewModel.SortedItems}"
            SelectionMode="None"
            Style="{StaticResource MediaListViewStyle}">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <controls:MediaListViewItem
                        IsAlbumColumnVisible="False"
                        IsTrackNumberVisible="True"
                        PlayCommand="{Binding DataContext.PlayCommand, ElementName=ItemList}" />
                </DataTemplate>
            </ListView.ItemTemplate>
            <ListView.Header>
                <Border x:Name="ListHeaderPadding" Height="112" />
            </ListView.Header>
            <ListView.Footer>
                <Border Height="{x:Bind Common.FooterBottomPaddingHeight, Mode=OneWay}" />
            </ListView.Footer>
            <interactivity:Interaction.Behaviors>
                <interactions:AlternatingListViewBehavior
                    AlternateBackground="{ThemeResource CardBackgroundFillColorDefaultBrush}"
                    AlternateBorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                    AlternateBorderThickness="1" />
                <interactions:ListViewContextTriggerBehavior Flyout="{x:Bind ItemFlyout}" />
                <interactions:BringIntoViewWithOffsetBehavior FromBottom="{x:Bind Common.FooterBottomPaddingHeight, Mode=OneWay}" />
                <interactions:FocusOnItemClickBehavior />
            </interactivity:Interaction.Behaviors>
        </ListView>

        <interactivity:Interaction.Behaviors>
            <interactions:GamepadXYNavigationBehavior />
        </interactivity:Interaction.Behaviors>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="NavigationViewStates">
                <VisualState x:Name="Expanded" />
                <VisualState x:Name="Compact" />
                <VisualState x:Name="Minimal">
                    <VisualState.StateTriggers>
                        <triggers:IsEqualStateTrigger Value="{x:Bind Common.NavigationViewDisplayMode, Mode=OneWay}">
                            <triggers:IsEqualStateTrigger.To>
                                <muxc:NavigationViewDisplayMode>Minimal</muxc:NavigationViewDisplayMode>
                            </triggers:IsEqualStateTrigger.To>
                        </triggers:IsEqualStateTrigger>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <!--<Setter Target="BackgroundHost.Margin" Value="0,-136,0,0" />-->
                        <Setter Target="Header.Margin" Value="0,0,0,-48" />
                        <Setter Target="Header.Padding" Value="{StaticResource ContentPageMinimalPadding}" />
                        <Setter Target="CoverArt.Width" Value="160" />
                        <Setter Target="CoverArt.Height" Value="160" />
                        <Setter Target="CoverArtIcon.FontSize" Value="52" />
                        <Setter Target="SubtitleText.FontSize" Value="{StaticResource BodyTextBlockFontSize}" />
                        <Setter Target="ItemList.Padding" Value="{StaticResource ContentPageMinimalPadding}" />
                        <Setter Target="ListHeaderPadding.Height" Value="72" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</Page>
