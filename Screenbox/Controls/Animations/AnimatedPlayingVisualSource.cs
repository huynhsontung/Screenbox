//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.1.2+g858356d409
//       
//       Command:
//           LottieGen -GenerateColorBindings -GenerateDependencyObject -Language CSharp -MinimumUapVersion 8 -Namespace Screenbox.Controls.Animations -Public -WinUIVersion 2.8 -InputFile AnimatedPlayingVisualSource.json
//       
//       Input file:
//           AnimatedPlayingVisualSource.json (6718 bytes created 23:35-07:00 Oct 15 2023)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ___________________________________________________________
// |       Object stats       | UAP v15 count | UAP v7 count |
// |__________________________|_______________|______________|
// | All CompositionObjects   |            63 |           71 |
// |--------------------------+---------------+--------------|
// | Expression animators     |            12 |           16 |
// | KeyFrame animators       |             5 |            5 |
// | Reference parameters     |            12 |           16 |
// | Expression operations    |            24 |           24 |
// |--------------------------+---------------+--------------|
// | Animated brushes         |             1 |            1 |
// | Animated gradient stops  |             - |            - |
// | ExpressionAnimations     |            12 |           12 |
// | PathKeyFrameAnimations   |             - |            - |
// |--------------------------+---------------+--------------|
// | ContainerVisuals         |             1 |            1 |
// | ShapeVisuals             |             1 |            1 |
// |--------------------------+---------------+--------------|
// | ContainerShapes          |             - |            - |
// | CompositionSpriteShapes  |             5 |            5 |
// |--------------------------+---------------+--------------|
// | Brushes                  |             1 |            1 |
// | Gradient stops           |             - |            - |
// | CompositionVisualSurface |             - |            - |
// -----------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;
using Windows.UI.Xaml;

namespace Screenbox.Controls.Animations
{
    // Name:        mini
    // Frame rate:  60 fps
    // Frame count: 41
    // Duration:    683.3 mS
    sealed class AnimatedPlayingVisualSource
        : DependencyObject
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 0.683 seconds.
        internal const long c_durationTicks = 6833333;

        // Theme property: Color_FFFFFF.
        internal static readonly Color c_themeColor_FFFFFF = Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF);

        CompositionPropertySet _themeProperties;

        /// <summary>
        /// Dependency property for Color_FFFFFF.
        /// </summary>
        public static readonly DependencyProperty Color_FFFFFFProperty =
            DependencyProperty.Register("Color_FFFFFF", typeof(Color), typeof(AnimatedPlayingVisualSource),
                new PropertyMetadata(Color.FromArgb(0xFF, 0xFF, 0xFF, 0xFF), OnColor_FFFFFFChanged));

        // Theme properties.
        public Color Color_FFFFFF
        {
            get => (Color)GetValue(Color_FFFFFFProperty);
            set => SetValue(Color_FFFFFFProperty, value);
        }

        static Vector4 ColorAsVector4(Color color) => new Vector4(color.R, color.G, color.B, color.A);

        static void OnColor_FFFFFFChanged(DependencyObject d, DependencyPropertyChangedEventArgs args)
        {
            ((AnimatedPlayingVisualSource)d)._themeProperties?.InsertVector4("Color_FFFFFF", ColorAsVector4((Color)(Color)args.NewValue));
        }

        CompositionPropertySet EnsureThemeProperties(Compositor compositor)
        {
            if (_themeProperties == null)
            {
                _themeProperties = compositor.CreatePropertySet();
                _themeProperties.InsertVector4("Color_FFFFFF", ColorAsVector4((Color)Color_FFFFFF));
            }
            return _themeProperties;
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            EnsureThemeProperties(compositor);

            if (AnimatedPlayingVisualSource_AnimatedVisual_UAPv15.IsRuntimeCompatible())
            {
                var res =
                    new AnimatedPlayingVisualSource_AnimatedVisual_UAPv15(
                        compositor,
                        _themeProperties
                        );
                res.CreateAnimations();
                return res;
            }

            if (AnimatedPlayingVisualSource_AnimatedVisual_UAPv7.IsRuntimeCompatible())
            {
                var res =
                    new AnimatedPlayingVisualSource_AnimatedVisual_UAPv7(
                        compositor,
                        _themeProperties
                        );
                res.CreateAnimations();
                return res;
            }

            return null;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 41d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(6833333);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 41d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
            if (propertyName == "Color_FFFFFF")
            {
                Color_FFFFFF = value;
            }
            else
            {
                return;
            }

            if (_themeProperties != null)
            {
                _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
            }
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class AnimatedPlayingVisualSource_AnimatedVisual_UAPv15 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 6833333;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            AnimationController _animationController_0;
            CompositionColorBrush _themeColor_Color_FFFFFF;
            CompositionRoundedRectangleGeometry _roundedRectangle_0;
            CompositionRoundedRectangleGeometry _roundedRectangle_1;
            CompositionRoundedRectangleGeometry _roundedRectangle_2;
            CompositionRoundedRectangleGeometry _roundedRectangle_3;
            CompositionRoundedRectangleGeometry _roundedRectangle_4;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            StepEasingFunction _holdThenStepEasingFunction;
            Vector2KeyFrameAnimation _sizeVector2Animation_0;
            Vector2KeyFrameAnimation _sizeVector2Animation_1;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // Color bound to theme property value: Color_FFFFFF
            CompositionColorBrush ThemeColor_Color_FFFFFF()
            {
                if (_themeColor_Color_FFFFFF != null) { return _themeColor_Color_FFFFFF; }
                var result = _themeColor_Color_FFFFFF = _c.CreateColorBrush();
                BindProperty(_themeColor_Color_FFFFFF, "Color", "ColorRGB(_theme.Color_FFFFFF.W,_theme.Color_FFFFFF.X,_theme.Color_FFFFFF.Y,_theme.Color_FFFFFF.Z)", "_theme", _themeProperties);
                return result;
            }

            // 矩形路径 1.RectangleGeometry
            CompositionRoundedRectangleGeometry RoundedRectangle_0()
            {
                if (_roundedRectangle_0 != null) { return _roundedRectangle_0; }
                var result = _roundedRectangle_0 = _c.CreateRoundedRectangleGeometry();
                result.CornerRadius = new Vector2(0F, 0F);
                result.Offset = new Vector2(-1F, -3F);
                BindProperty(_roundedRectangle_0, "CornerRadius", "Vector2(Min(1,(Min(my.Size.X,my.Size.Y)/2)),Min(1,(Min(my.Size.X,my.Size.Y)/2)))", "my", _roundedRectangle_0);
                BindProperty(_roundedRectangle_0, "Offset", "Vector2(0,0)-(my.Size/Vector2(2,2))", "my", _roundedRectangle_0);
                return result;
            }

            // 矩形路径 1.RectangleGeometry
            CompositionRoundedRectangleGeometry RoundedRectangle_1()
            {
                if (_roundedRectangle_1 != null) { return _roundedRectangle_1; }
                var result = _roundedRectangle_1 = _c.CreateRoundedRectangleGeometry();
                result.CornerRadius = new Vector2(0F, 0F);
                result.Offset = new Vector2(-1F, -5F);
                BindProperty(_roundedRectangle_1, "CornerRadius", "Vector2(Min(1,(Min(my.Size.X,my.Size.Y)/2)),Min(1,(Min(my.Size.X,my.Size.Y)/2)))", "my", _roundedRectangle_1);
                BindProperty(_roundedRectangle_1, "Offset", "Vector2(0,0)-(my.Size/Vector2(2,2))", "my", _roundedRectangle_1);
                return result;
            }

            // 矩形路径 1.RectangleGeometry
            CompositionRoundedRectangleGeometry RoundedRectangle_2()
            {
                if (_roundedRectangle_2 != null) { return _roundedRectangle_2; }
                var result = _roundedRectangle_2 = _c.CreateRoundedRectangleGeometry();
                result.CornerRadius = new Vector2(0F, 0F);
                result.Offset = new Vector2(-1F, -7F);
                BindProperty(_roundedRectangle_2, "CornerRadius", "Vector2(Min(1,(Min(my.Size.X,my.Size.Y)/2)),Min(1,(Min(my.Size.X,my.Size.Y)/2)))", "my", _roundedRectangle_2);
                BindProperty(_roundedRectangle_2, "Offset", "Vector2(0,0)-(my.Size/Vector2(2,2))", "my", _roundedRectangle_2);
                return result;
            }

            // 矩形路径 1.RectangleGeometry
            CompositionRoundedRectangleGeometry RoundedRectangle_3()
            {
                if (_roundedRectangle_3 != null) { return _roundedRectangle_3; }
                var result = _roundedRectangle_3 = _c.CreateRoundedRectangleGeometry();
                result.CornerRadius = new Vector2(0F, 0F);
                result.Offset = new Vector2(-1F, -5F);
                BindProperty(_roundedRectangle_3, "CornerRadius", "Vector2(Min(1,(Min(my.Size.X,my.Size.Y)/2)),Min(1,(Min(my.Size.X,my.Size.Y)/2)))", "my", _roundedRectangle_3);
                BindProperty(_roundedRectangle_3, "Offset", "Vector2(0,0)-(my.Size/Vector2(2,2))", "my", _roundedRectangle_3);
                return result;
            }

            // 矩形路径 1.RectangleGeometry
            CompositionRoundedRectangleGeometry RoundedRectangle_4()
            {
                if (_roundedRectangle_4 != null) { return _roundedRectangle_4; }
                var result = _roundedRectangle_4 = _c.CreateRoundedRectangleGeometry();
                result.CornerRadius = new Vector2(0F, 0F);
                result.Offset = new Vector2(-1F, -3F);
                BindProperty(_roundedRectangle_4, "CornerRadius", "Vector2(Min(1,(Min(my.Size.X,my.Size.Y)/2)),Min(1,(Min(my.Size.X,my.Size.Y)/2)))", "my", _roundedRectangle_4);
                BindProperty(_roundedRectangle_4, "Offset", "Vector2(0,0)-(my.Size/Vector2(2,2))", "my", _roundedRectangle_4);
                return result;
            }

            // Layer aggregator
            // 矩形路径 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<57, 32.875>, Scale:<3, 3>
                var geometry = RoundedRectangle_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(3F, 0F, 0F, 3F, 57F, 32.875F), ThemeColor_Color_FFFFFF()); ;
                return result;
            }

            // Layer aggregator
            // 矩形路径 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<45, 32.875>, Scale:<3, 3>
                var geometry = RoundedRectangle_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(3F, 0F, 0F, 3F, 45F, 32.875F), ThemeColor_Color_FFFFFF()); ;
                return result;
            }

            // Layer aggregator
            // 矩形路径 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<32.875, 32.875>, Scale:<3, 3>
                var geometry = RoundedRectangle_2();
                var result = CreateSpriteShape(geometry, new Matrix3x2(3F, 0F, 0F, 3F, 32.875F, 32.875F), ThemeColor_Color_FFFFFF()); ;
                return result;
            }

            // Layer aggregator
            // 矩形路径 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<21, 33>, Scale:<3, 3>
                var geometry = RoundedRectangle_3();
                var result = CreateSpriteShape(geometry, new Matrix3x2(3F, 0F, 0F, 3F, 21F, 33F), ThemeColor_Color_FFFFFF()); ;
                return result;
            }

            // Layer aggregator
            // 矩形路径 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<9, 33>, Scale:<3, 3>
                var geometry = RoundedRectangle_4();
                var result = CreateSpriteShape(geometry, new Matrix3x2(3F, 0F, 0F, 3F, 9F, 33F), ThemeColor_Color_FFFFFF()); ;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F))
                    : _cubicBezierEasingFunction_0;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(66F, 66F);
                var shapes = result.Shapes;
                // Offset:<57, 32.875>
                shapes.Add(SpriteShape_0());
                // Offset:<45, 32.875>
                shapes.Add(SpriteShape_1());
                // Offset:<32.875, 32.875>
                shapes.Add(SpriteShape_2());
                // Offset:<21, 33>
                shapes.Add(SpriteShape_3());
                // Offset:<9, 33>
                shapes.Add(SpriteShape_4());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            // Size
            Vector2KeyFrameAnimation SizeVector2Animation_0()
            {
                // Frame 0.
                if (_sizeVector2Animation_0 != null) { return _sizeVector2Animation_0; }
                var result = _sizeVector2Animation_0 = CreateVector2KeyFrameAnimation(0F, new Vector2(2F, 6F), HoldThenStepEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.243902445F, new Vector2(2F, 10F), CubicBezierEasingFunction_0());
                // Frame 20.
                result.InsertKeyFrame(0.48780489F, new Vector2(2F, 14F), CubicBezierEasingFunction_0());
                // Frame 30.
                result.InsertKeyFrame(0.731707335F, new Vector2(2F, 10F), CubicBezierEasingFunction_0());
                // Frame 40.
                result.InsertKeyFrame(0.975609779F, new Vector2(2F, 6F), CubicBezierEasingFunction_0());
                return result;
            }

            // Size
            Vector2KeyFrameAnimation SizeVector2Animation_1()
            {
                // Frame 0.
                if (_sizeVector2Animation_1 != null) { return _sizeVector2Animation_1; }
                var result = _sizeVector2Animation_1 = CreateVector2KeyFrameAnimation(0F, new Vector2(2F, 10F), HoldThenStepEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.243902445F, new Vector2(2F, 8F), CubicBezierEasingFunction_0());
                // Frame 20.
                result.InsertKeyFrame(0.48780489F, new Vector2(2F, 10F), CubicBezierEasingFunction_0());
                // Frame 30.
                result.InsertKeyFrame(0.731707335F, new Vector2(2F, 6F), CubicBezierEasingFunction_0());
                // Frame 40.
                result.InsertKeyFrame(0.975609779F, new Vector2(2F, 10F), CubicBezierEasingFunction_0());
                return result;
            }

            // 矩形路径 1.RectangleGeometry
            // Size
            Vector2KeyFrameAnimation SizeVector2Animation_2()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(2F, 14F), HoldThenStepEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.243902445F, new Vector2(2F, 12F), CubicBezierEasingFunction_0());
                // Frame 20.
                result.InsertKeyFrame(0.48780489F, new Vector2(2F, 6F), CubicBezierEasingFunction_0());
                // Frame 30.
                result.InsertKeyFrame(0.731707335F, new Vector2(2F, 10F), CubicBezierEasingFunction_0());
                // Frame 40.
                result.InsertKeyFrame(0.975609779F, new Vector2(2F, 14F), CubicBezierEasingFunction_0());
                return result;
            }

            internal AnimatedPlayingVisualSource_AnimatedVisual_UAPv15(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(66F, 66F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _roundedRectangle_0.StartAnimation("Size", SizeVector2Animation_0(), AnimationController_0());
                _roundedRectangle_1.StartAnimation("Size", SizeVector2Animation_1(), AnimationController_0());
                _roundedRectangle_2.StartAnimation("Size", SizeVector2Animation_2(), AnimationController_0());
                _roundedRectangle_3.StartAnimation("Size", SizeVector2Animation_1(), AnimationController_0());
                _roundedRectangle_4.StartAnimation("Size", SizeVector2Animation_0(), AnimationController_0());
            }

            public void DestroyAnimations()
            {
                _roundedRectangle_0.StopAnimation("Size");
                _roundedRectangle_1.StopAnimation("Size");
                _roundedRectangle_2.StopAnimation("Size");
                _roundedRectangle_3.StopAnimation("Size");
                _roundedRectangle_4.StopAnimation("Size");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 15);
            }
        }

        sealed class AnimatedPlayingVisualSource_AnimatedVisual_UAPv7 : Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 6833333;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            readonly CompositionPropertySet _themeProperties;
            CompositionColorBrush _themeColor_Color_FFFFFF;
            CompositionRoundedRectangleGeometry _roundedRectangle_0;
            CompositionRoundedRectangleGeometry _roundedRectangle_1;
            CompositionRoundedRectangleGeometry _roundedRectangle_2;
            CompositionRoundedRectangleGeometry _roundedRectangle_3;
            CompositionRoundedRectangleGeometry _roundedRectangle_4;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ExpressionAnimation _rootProgress;
            StepEasingFunction _holdThenStepEasingFunction;
            Vector2KeyFrameAnimation _sizeVector2Animation_0;
            Vector2KeyFrameAnimation _sizeVector2Animation_1;

            static void StartProgressBoundAnimation(
                CompositionObject target,
                string animatedPropertyName,
                CompositionAnimation animation,
                ExpressionAnimation controllerProgressExpression)
            {
                target.StartAnimation(animatedPropertyName, animation);
                var controller = target.TryGetAnimationController(animatedPropertyName);
                controller.Pause();
                controller.StartAnimation("Progress", controllerProgressExpression);
            }

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            // Color bound to theme property value: Color_FFFFFF
            CompositionColorBrush ThemeColor_Color_FFFFFF()
            {
                if (_themeColor_Color_FFFFFF != null) { return _themeColor_Color_FFFFFF; }
                var result = _themeColor_Color_FFFFFF = _c.CreateColorBrush();
                BindProperty(_themeColor_Color_FFFFFF, "Color", "ColorRGB(_theme.Color_FFFFFF.W,_theme.Color_FFFFFF.X,_theme.Color_FFFFFF.Y,_theme.Color_FFFFFF.Z)", "_theme", _themeProperties);
                return result;
            }

            // 矩形路径 1.RectangleGeometry
            CompositionRoundedRectangleGeometry RoundedRectangle_0()
            {
                if (_roundedRectangle_0 != null) { return _roundedRectangle_0; }
                var result = _roundedRectangle_0 = _c.CreateRoundedRectangleGeometry();
                result.CornerRadius = new Vector2(0F, 0F);
                result.Offset = new Vector2(-1F, -3F);
                BindProperty(_roundedRectangle_0, "CornerRadius", "Vector2(Min(1,(Min(my.Size.X,my.Size.Y)/2)),Min(1,(Min(my.Size.X,my.Size.Y)/2)))", "my", _roundedRectangle_0);
                BindProperty(_roundedRectangle_0, "Offset", "Vector2(0,0)-(my.Size/Vector2(2,2))", "my", _roundedRectangle_0);
                return result;
            }

            // 矩形路径 1.RectangleGeometry
            CompositionRoundedRectangleGeometry RoundedRectangle_1()
            {
                if (_roundedRectangle_1 != null) { return _roundedRectangle_1; }
                var result = _roundedRectangle_1 = _c.CreateRoundedRectangleGeometry();
                result.CornerRadius = new Vector2(0F, 0F);
                result.Offset = new Vector2(-1F, -5F);
                BindProperty(_roundedRectangle_1, "CornerRadius", "Vector2(Min(1,(Min(my.Size.X,my.Size.Y)/2)),Min(1,(Min(my.Size.X,my.Size.Y)/2)))", "my", _roundedRectangle_1);
                BindProperty(_roundedRectangle_1, "Offset", "Vector2(0,0)-(my.Size/Vector2(2,2))", "my", _roundedRectangle_1);
                return result;
            }

            // 矩形路径 1.RectangleGeometry
            CompositionRoundedRectangleGeometry RoundedRectangle_2()
            {
                if (_roundedRectangle_2 != null) { return _roundedRectangle_2; }
                var result = _roundedRectangle_2 = _c.CreateRoundedRectangleGeometry();
                result.CornerRadius = new Vector2(0F, 0F);
                result.Offset = new Vector2(-1F, -7F);
                BindProperty(_roundedRectangle_2, "CornerRadius", "Vector2(Min(1,(Min(my.Size.X,my.Size.Y)/2)),Min(1,(Min(my.Size.X,my.Size.Y)/2)))", "my", _roundedRectangle_2);
                BindProperty(_roundedRectangle_2, "Offset", "Vector2(0,0)-(my.Size/Vector2(2,2))", "my", _roundedRectangle_2);
                return result;
            }

            // 矩形路径 1.RectangleGeometry
            CompositionRoundedRectangleGeometry RoundedRectangle_3()
            {
                if (_roundedRectangle_3 != null) { return _roundedRectangle_3; }
                var result = _roundedRectangle_3 = _c.CreateRoundedRectangleGeometry();
                result.CornerRadius = new Vector2(0F, 0F);
                result.Offset = new Vector2(-1F, -5F);
                BindProperty(_roundedRectangle_3, "CornerRadius", "Vector2(Min(1,(Min(my.Size.X,my.Size.Y)/2)),Min(1,(Min(my.Size.X,my.Size.Y)/2)))", "my", _roundedRectangle_3);
                BindProperty(_roundedRectangle_3, "Offset", "Vector2(0,0)-(my.Size/Vector2(2,2))", "my", _roundedRectangle_3);
                return result;
            }

            // 矩形路径 1.RectangleGeometry
            CompositionRoundedRectangleGeometry RoundedRectangle_4()
            {
                if (_roundedRectangle_4 != null) { return _roundedRectangle_4; }
                var result = _roundedRectangle_4 = _c.CreateRoundedRectangleGeometry();
                result.CornerRadius = new Vector2(0F, 0F);
                result.Offset = new Vector2(-1F, -3F);
                BindProperty(_roundedRectangle_4, "CornerRadius", "Vector2(Min(1,(Min(my.Size.X,my.Size.Y)/2)),Min(1,(Min(my.Size.X,my.Size.Y)/2)))", "my", _roundedRectangle_4);
                BindProperty(_roundedRectangle_4, "Offset", "Vector2(0,0)-(my.Size/Vector2(2,2))", "my", _roundedRectangle_4);
                return result;
            }

            // Layer aggregator
            // 矩形路径 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<57, 32.875>, Scale:<3, 3>
                var geometry = RoundedRectangle_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(3F, 0F, 0F, 3F, 57F, 32.875F), ThemeColor_Color_FFFFFF()); ;
                return result;
            }

            // Layer aggregator
            // 矩形路径 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<45, 32.875>, Scale:<3, 3>
                var geometry = RoundedRectangle_1();
                var result = CreateSpriteShape(geometry, new Matrix3x2(3F, 0F, 0F, 3F, 45F, 32.875F), ThemeColor_Color_FFFFFF()); ;
                return result;
            }

            // Layer aggregator
            // 矩形路径 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<32.875, 32.875>, Scale:<3, 3>
                var geometry = RoundedRectangle_2();
                var result = CreateSpriteShape(geometry, new Matrix3x2(3F, 0F, 0F, 3F, 32.875F, 32.875F), ThemeColor_Color_FFFFFF()); ;
                return result;
            }

            // Layer aggregator
            // 矩形路径 1
            CompositionSpriteShape SpriteShape_3()
            {
                // Offset:<21, 33>, Scale:<3, 3>
                var geometry = RoundedRectangle_3();
                var result = CreateSpriteShape(geometry, new Matrix3x2(3F, 0F, 0F, 3F, 21F, 33F), ThemeColor_Color_FFFFFF()); ;
                return result;
            }

            // Layer aggregator
            // 矩形路径 1
            CompositionSpriteShape SpriteShape_4()
            {
                // Offset:<9, 33>, Scale:<3, 3>
                var geometry = RoundedRectangle_4();
                var result = CreateSpriteShape(geometry, new Matrix3x2(3F, 0F, 0F, 3F, 9F, 33F), ThemeColor_Color_FFFFFF()); ;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F))
                    : _cubicBezierEasingFunction_0;
            }

            ExpressionAnimation RootProgress()
            {
                if (_rootProgress != null) { return _rootProgress; }
                var result = _rootProgress = _c.CreateExpressionAnimation("_.Progress");
                result.SetReferenceParameter("_", _root);
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(66F, 66F);
                var shapes = result.Shapes;
                // Offset:<57, 32.875>
                shapes.Add(SpriteShape_0());
                // Offset:<45, 32.875>
                shapes.Add(SpriteShape_1());
                // Offset:<32.875, 32.875>
                shapes.Add(SpriteShape_2());
                // Offset:<21, 33>
                shapes.Add(SpriteShape_3());
                // Offset:<9, 33>
                shapes.Add(SpriteShape_4());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            // Size
            Vector2KeyFrameAnimation SizeVector2Animation_0()
            {
                // Frame 0.
                if (_sizeVector2Animation_0 != null) { return _sizeVector2Animation_0; }
                var result = _sizeVector2Animation_0 = CreateVector2KeyFrameAnimation(0F, new Vector2(2F, 6F), HoldThenStepEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.243902445F, new Vector2(2F, 10F), CubicBezierEasingFunction_0());
                // Frame 20.
                result.InsertKeyFrame(0.48780489F, new Vector2(2F, 14F), CubicBezierEasingFunction_0());
                // Frame 30.
                result.InsertKeyFrame(0.731707335F, new Vector2(2F, 10F), CubicBezierEasingFunction_0());
                // Frame 40.
                result.InsertKeyFrame(0.975609779F, new Vector2(2F, 6F), CubicBezierEasingFunction_0());
                return result;
            }

            // Size
            Vector2KeyFrameAnimation SizeVector2Animation_1()
            {
                // Frame 0.
                if (_sizeVector2Animation_1 != null) { return _sizeVector2Animation_1; }
                var result = _sizeVector2Animation_1 = CreateVector2KeyFrameAnimation(0F, new Vector2(2F, 10F), HoldThenStepEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.243902445F, new Vector2(2F, 8F), CubicBezierEasingFunction_0());
                // Frame 20.
                result.InsertKeyFrame(0.48780489F, new Vector2(2F, 10F), CubicBezierEasingFunction_0());
                // Frame 30.
                result.InsertKeyFrame(0.731707335F, new Vector2(2F, 6F), CubicBezierEasingFunction_0());
                // Frame 40.
                result.InsertKeyFrame(0.975609779F, new Vector2(2F, 10F), CubicBezierEasingFunction_0());
                return result;
            }

            // 矩形路径 1.RectangleGeometry
            // Size
            Vector2KeyFrameAnimation SizeVector2Animation_2()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(2F, 14F), HoldThenStepEasingFunction());
                // Frame 10.
                result.InsertKeyFrame(0.243902445F, new Vector2(2F, 12F), CubicBezierEasingFunction_0());
                // Frame 20.
                result.InsertKeyFrame(0.48780489F, new Vector2(2F, 6F), CubicBezierEasingFunction_0());
                // Frame 30.
                result.InsertKeyFrame(0.731707335F, new Vector2(2F, 10F), CubicBezierEasingFunction_0());
                // Frame 40.
                result.InsertKeyFrame(0.975609779F, new Vector2(2F, 14F), CubicBezierEasingFunction_0());
                return result;
            }

            internal AnimatedPlayingVisualSource_AnimatedVisual_UAPv7(
                Compositor compositor,
                CompositionPropertySet themeProperties
                )
            {
                _c = compositor;
                _themeProperties = themeProperties;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(66F, 66F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                StartProgressBoundAnimation(_roundedRectangle_0, "Size", SizeVector2Animation_0(), RootProgress());
                StartProgressBoundAnimation(_roundedRectangle_1, "Size", SizeVector2Animation_1(), RootProgress());
                StartProgressBoundAnimation(_roundedRectangle_2, "Size", SizeVector2Animation_2(), RootProgress());
                StartProgressBoundAnimation(_roundedRectangle_3, "Size", SizeVector2Animation_1(), RootProgress());
                StartProgressBoundAnimation(_roundedRectangle_4, "Size", SizeVector2Animation_0(), RootProgress());
            }

            public void DestroyAnimations()
            {
                _roundedRectangle_0.StopAnimation("Size");
                _roundedRectangle_1.StopAnimation("Size");
                _roundedRectangle_2.StopAnimation("Size");
                _roundedRectangle_3.StopAnimation("Size");
                _roundedRectangle_4.StopAnimation("Size");
            }

            internal static bool IsRuntimeCompatible()
            {
                return Windows.Foundation.Metadata.ApiInformation.IsApiContractPresent("Windows.Foundation.UniversalApiContract", 7);
            }
        }
    }
}
