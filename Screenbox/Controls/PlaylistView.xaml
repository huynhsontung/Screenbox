<UserControl
    x:Class="Screenbox.Controls.PlaylistView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:commands="using:Screenbox.Commands"
    xmlns:controls="using:Screenbox.Controls"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:extensions="using:Screenbox.Controls.Extensions"
    xmlns:interactions="using:Screenbox.Controls.Interactions"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:strings="using:Screenbox.Strings"
    xmlns:ui="using:Microsoft.Toolkit.Uwp.UI"
    d:DesignHeight="300"
    d:DesignWidth="400"
    Loaded="PlaylistView_OnLoaded"
    mc:Ignorable="d">

    <Grid>
        <Grid.Resources>
            <ThemeShadow x:Name="SharedShadow" />

            <XamlUICommand
                x:Key="PlayCommand"
                Command="{x:Bind ViewModel.Playlist.PlaySingleCommand}"
                IconSource="{ui:SymbolIconSource Symbol=Play}"
                Label="{strings:Resources Key=Play}" />

            <XamlUICommand
                x:Key="PlayNextCommand"
                Command="{x:Bind ViewModel.PlayNextCommand}"
                IconSource="{ui:FontIconSource FontFamily={StaticResource ScreenboxCustomIconsFontFamily},
                                               Glyph=B}"
                Label="{strings:Resources Key=PlayNext}" />

            <XamlUICommand
                x:Key="RemoveCommand"
                Command="{x:Bind ViewModel.RemoveCommand}"
                IconSource="{ui:SymbolIconSource Symbol=Delete}"
                Label="{strings:Resources Key=Remove}" />

            <XamlUICommand
                x:Key="MoveUpCommand"
                Command="{x:Bind ViewModel.MoveItemUpCommand}"
                IconSource="{ui:FontIconSource Glyph=&#xe74a;}"
                Label="{strings:Resources Key=MoveUp}" />

            <XamlUICommand
                x:Key="MoveDownCommand"
                Command="{x:Bind ViewModel.MoveItemDownCommand}"
                IconSource="{ui:FontIconSource Glyph=&#xe74b;}"
                Label="{strings:Resources Key=MoveDown}" />

            <XamlUICommand
                x:Key="PropertiesCommand"
                Command="{StaticResource ShowPropertiesCommand}"
                IconSource="{ui:FontIconSource Glyph=&#xe946;}"
                Label="{strings:Resources Key=Properties}" />

            <MenuFlyout x:Name="ItemFlyout">
                <MenuFlyoutItem Command="{StaticResource PlayCommand}" CommandParameter="{Binding}" />
                <MenuFlyoutItem Command="{StaticResource PlayNextCommand}" CommandParameter="{Binding}" />
                <MenuFlyoutSeparator />
                <MenuFlyoutItem Command="{StaticResource RemoveCommand}" CommandParameter="{Binding}" />
                <MenuFlyoutItem Command="{StaticResource MoveUpCommand}" CommandParameter="{Binding}" />
                <MenuFlyoutItem Command="{StaticResource MoveDownCommand}" CommandParameter="{Binding}" />
                <MenuFlyoutItem Command="{StaticResource PropertiesCommand}" CommandParameter="{Binding}" />
                <MenuFlyoutSeparator Visibility="{x:Bind Common.IsAdvancedModeEnabled}" />
                <MenuFlyoutItem
                    CommandParameter="{Binding}"
                    Icon="{ui:SymbolIcon Symbol=Setting}"
                    Text="{strings:Resources Key=SetPlaybackOptions}"
                    Visibility="{x:Bind Common.IsAdvancedModeEnabled}">
                    <MenuFlyoutItem.Command>
                        <commands:SetPlaybackOptionsCommand PlayCommand="{x:Bind ViewModel.Playlist.PlaySingleCommand}" />
                    </MenuFlyoutItem.Command>
                </MenuFlyoutItem>
            </MenuFlyout>
        </Grid.Resources>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <StackPanel
            x:Name="ActionButtonRow"
            Grid.Row="0"
            Height="50"
            Padding="{x:Bind Padding, Mode=OneWay}"
            Orientation="Horizontal">
            <Button
                x:Name="AddFilesButton"
                Margin="0,0,12,0"
                Command="{x:Bind ViewModel.AddFilesCommand}"
                Visibility="Collapsed">
                <StackPanel Orientation="Horizontal">
                    <FontIcon Glyph="&#xe838;" />
                    <TextBlock Margin="8,0,0,0" Text="{strings:Resources Key=AddFiles}" />
                </StackPanel>
            </Button>

            <Button
                x:Name="ClearButton"
                Margin="0,0,12,0"
                VerticalAlignment="Center"
                Command="{x:Bind ViewModel.Playlist.ClearCommand}"
                IsEnabled="{x:Bind ViewModel.HasItems, Mode=OneWay}">
                <StackPanel Orientation="Horizontal">
                    <FontIcon Glyph="&#xe74d;" />
                    <TextBlock
                        x:Name="ClearButtonLabel"
                        Margin="8,0,0,0"
                        Text="{x:Bind strings:Resources.Clear}" />
                </StackPanel>
            </Button>

            <ToggleButton
                x:Name="MultiSelectToggle"
                VerticalAlignment="Center"
                IsChecked="{x:Bind ViewModel.EnableMultiSelect, Mode=TwoWay}"
                IsEnabled="{x:Bind ViewModel.HasItems, Mode=OneWay}"
                XYFocusLeft="{x:Bind ClearButton}">
                <StackPanel Orientation="Horizontal">
                    <FontIcon Glyph="&#xe762;" />
                    <TextBlock
                        x:Name="MultiSelectToggleLabel"
                        Margin="8,0,0,0"
                        Text="{x:Bind strings:Resources.Multiselect}" />
                </StackPanel>
            </ToggleButton>
        </StackPanel>

        <Border
            x:Name="SelectionCommandRow"
            Grid.Row="0"
            Margin="{x:Bind Padding, Mode=OneWay}"
            Background="{ThemeResource AcrylicInAppFillColorDefaultBrush}"
            BorderBrush="{ThemeResource CommandBarBorderBrushOpen}"
            BorderThickness="1"
            CornerRadius="8"
            Shadow="{StaticResource SharedShadow}"
            Translation="0,0,32"
            Visibility="Collapsed">
            <CommandBar
                x:Name="SelectionCommandBar"
                VerticalContentAlignment="Center"
                DefaultLabelPosition="Right"
                IsDynamicOverflowEnabled="False"
                SizeChanged="CommandBar_OnSizeChanged">
                <AppBarButton
                    x:Name="PlayNextButton"
                    Command="{x:Bind ViewModel.PlaySelectedNextCommand}"
                    CommandParameter="{x:Bind PlaylistListView.SelectedItems}"
                    Icon="{ui:FontIcon FontFamily={StaticResource ScreenboxCustomIconsFontFamily},
                                       Glyph=B}"
                    Label="{x:Bind strings:Resources.PlayNext}">
                    <interactivity:Interaction.Behaviors>
                        <core:EventTriggerBehavior EventName="Click">
                            <core:ChangePropertyAction
                                PropertyName="SelectedItem"
                                TargetObject="{x:Bind PlaylistListView}"
                                Value="{x:Null}" />
                        </core:EventTriggerBehavior>
                    </interactivity:Interaction.Behaviors>
                </AppBarButton>
                <AppBarButton
                    x:Name="RemoveSelectedButton"
                    Command="{x:Bind ViewModel.RemoveSelectedCommand}"
                    CommandParameter="{x:Bind PlaylistListView.SelectedItems}"
                    Icon="Delete"
                    Label="{x:Bind strings:Resources.Remove}">
                    <AppBarButton.KeyboardAccelerators>
                        <KeyboardAccelerator Key="Delete" />
                    </AppBarButton.KeyboardAccelerators>
                </AppBarButton>
                <AppBarButton
                    x:Name="MoveUpButton"
                    Command="{x:Bind ViewModel.MoveSelectedItemUpCommand}"
                    CommandParameter="{x:Bind PlaylistListView.SelectedItems}"
                    Label="{x:Bind strings:Resources.MoveUp}"
                    Visibility="Collapsed">
                    <AppBarButton.Icon>
                        <FontIcon Glyph="&#xe74a;" />
                    </AppBarButton.Icon>
                </AppBarButton>
                <AppBarButton
                    x:Name="MoveDownButton"
                    Command="{x:Bind ViewModel.MoveSelectedItemDownCommand}"
                    CommandParameter="{x:Bind PlaylistListView.SelectedItems}"
                    Label="{x:Bind strings:Resources.MoveDown}"
                    Visibility="Collapsed">
                    <AppBarButton.Icon>
                        <FontIcon Glyph="&#xe74b;" />
                    </AppBarButton.Icon>
                </AppBarButton>
                <AppBarButton
                    Width="40"
                    Command="{x:Bind ViewModel.ClearSelectionCommand}"
                    Icon="Clear"
                    Label="{x:Bind strings:Resources.ClearSelection}"
                    LabelPosition="Collapsed" />
                <CommandBar.Content>
                    <StackPanel Margin="8,0" Orientation="Horizontal">
                        <CheckBox
                            x:Name="SelectionCheckBox"
                            VerticalAlignment="Center"
                            Click="SelectionCheckBox_OnClick"
                            Content="{x:Bind strings:Resources.ItemsSelected(ViewModel.SelectionCount), Mode=OneWay}" />
                    </StackPanel>
                </CommandBar.Content>
            </CommandBar>
        </Border>

        <ListView
            x:Name="PlaylistListView"
            Grid.Row="1"
            Margin="0,8,0,0"
            Padding="{x:Bind Padding, Mode=OneWay}"
            extensions:ListViewExtensions.ItemCornerRadius="8"
            extensions:ListViewExtensions.ItemMargin="0,2,0,2"
            ui:ListViewExtensions.ItemContainerStretchDirection="Horizontal"
            ui:ScrollViewerExtensions.VerticalScrollBarMargin="{x:Bind Common.ScrollBarMargin, Mode=OneWay}"
            AllowDrop="True"
            CanDragItems="True"
            CanReorderItems="True"
            DragOver="PlaylistListView_OnDragOver"
            Drop="PlaylistListView_OnDrop"
            IsItemClickEnabled="True"
            ItemsSource="{x:Bind ViewModel.Playlist.Items}"
            SelectionChanged="PlaylistListView_OnSelectionChanged"
            SelectionMode="Extended">
            <ListView.Resources>
                <XamlUICommand x:Key="MediaListViewItemPlayCommand" Command="{x:Bind ViewModel.PlaySingleCommand}" />
            </ListView.Resources>
            <ListView.ItemTemplate>
                <DataTemplate>
                    <controls:MediaListViewItem IsIconVisible="True" />
                </DataTemplate>
            </ListView.ItemTemplate>
            <interactivity:Interaction.Behaviors>
                <interactions:AlternatingListViewBehavior
                    AlternateBackground="{ThemeResource AccentListViewItemBackgroundBrush}"
                    AlternateBorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                    AlternateBorderThickness="1" />
                <interactions:ListViewContextTriggerBehavior Flyout="{x:Bind ItemFlyout}" />
                <interactions:BringIntoViewWithOffsetBehavior FromBottom="{x:Bind Common.FooterBottomPaddingHeight, Mode=OneWay}" />
                <interactions:FocusOnItemClickBehavior />
            </interactivity:Interaction.Behaviors>
            <ListView.Footer>
                <Border x:Name="Footer" Height="{x:Bind Common.FooterBottomPaddingHeight, Mode=OneWay}" />
            </ListView.Footer>
        </ListView>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="SelectionModes">
                <VisualState x:Name="Multiple">
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{x:Bind ViewModel.EnableMultiSelect, Mode=OneWay}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="SelectionCommandRow.Visibility" Value="Visible" />
                        <Setter Target="ActionButtonRow.Visibility" Value="Collapsed" />
                        <Setter Target="PlaylistListView.SelectionMode" Value="Multiple" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="MultipleSingleSelected">
                    <VisualState.Setters>
                        <Setter Target="SelectionCommandRow.Visibility" Value="Visible" />
                        <Setter Target="ActionButtonRow.Visibility" Value="Collapsed" />
                        <Setter Target="PlaylistListView.SelectionMode" Value="Multiple" />
                        <Setter Target="MoveUpButton.Visibility" Value="Visible" />
                        <Setter Target="MoveDownButton.Visibility" Value="Visible" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
            <VisualStateGroup x:Name="LayoutGroup">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Compact">
                    <VisualState.Setters>
                        <Setter Target="MoveUpButton.Width" Value="40" />
                        <Setter Target="MoveUpButton.LabelPosition" Value="Collapsed" />
                        <Setter Target="MoveUpButton.(ToolTipService.ToolTip)" Value="{x:Bind strings:Resources.MoveUp}" />
                        <Setter Target="MoveDownButton.Width" Value="40" />
                        <Setter Target="MoveDownButton.LabelPosition" Value="Collapsed" />
                        <Setter Target="MoveDownButton.(ToolTipService.ToolTip)" Value="{x:Bind strings:Resources.MoveDown}" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Minimal">
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{x:Bind IsFlyout, Mode=OneWay}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="Footer.Visibility" Value="Collapsed" />
                        <Setter Target="PlaylistListView.(ui:ScrollViewerExtensions.VerticalScrollBarMargin)" Value="0" />
                        <Setter Target="MoveUpButton.Width" Value="40" />
                        <Setter Target="MoveUpButton.LabelPosition" Value="Collapsed" />
                        <Setter Target="MoveUpButton.(ToolTipService.ToolTip)" Value="{x:Bind strings:Resources.MoveUp}" />
                        <Setter Target="MoveDownButton.Width" Value="40" />
                        <Setter Target="MoveDownButton.LabelPosition" Value="Collapsed" />
                        <Setter Target="MoveDownButton.(ToolTipService.ToolTip)" Value="{x:Bind strings:Resources.MoveDown}" />
                        <Setter Target="RemoveSelectedButton.Width" Value="40" />
                        <Setter Target="RemoveSelectedButton.LabelPosition" Value="Collapsed" />
                        <Setter Target="RemoveSelectedButton.(ToolTipService.ToolTip)" Value="{x:Bind strings:Resources.Remove}" />
                        <Setter Target="PlayNextButton.Width" Value="40" />
                        <Setter Target="PlayNextButton.LabelPosition" Value="Collapsed" />
                        <Setter Target="PlayNextButton.(ToolTipService.ToolTip)" Value="{x:Bind strings:Resources.PlayNext}" />
                        <Setter Target="AddFilesButton.Visibility" Value="Visible" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</UserControl>
