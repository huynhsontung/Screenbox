<UserControl
    x:Class="Screenbox.Controls.PlaylistView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:commands="using:Screenbox.Commands"
    xmlns:controls="using:Screenbox.Controls"
    xmlns:ctAnimations="using:CommunityToolkit.WinUI.Animations"
    xmlns:ctConverters="using:CommunityToolkit.WinUI.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:extensions="using:Screenbox.Controls.Extensions"
    xmlns:helpers="using:Screenbox.Helpers"
    xmlns:interactions="using:Screenbox.Controls.Interactions"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:strings="using:Screenbox.Strings"
    xmlns:system="using:System"
    xmlns:ui="using:CommunityToolkit.WinUI"
    d:DesignHeight="752"
    d:DesignWidth="848"
    Loaded="PlaylistView_OnLoaded"
    Unloaded="PlaylistView_OnUnloaded"
    mc:Ignorable="d">

    <Grid>
        <Grid.Resources>
            <ResourceDictionary>
                <ResourceDictionary.MergedDictionaries>
                    <ResourceDictionary Source="ms-appx:///Styles/CommandBar.xaml" />
                </ResourceDictionary.MergedDictionaries>

                <MenuFlyout x:Name="ItemFlyout">
                    <MenuFlyoutItem
                        Command="{x:Bind ViewModel.Playlist.PlaySingleCommand}"
                        CommandParameter="{Binding}"
                        Icon="{ui:FontIcon FontFamily={StaticResource ScreenboxSymbolThemeFontFamily},
                                           Glyph={StaticResource PlayGlyph}}"
                        Text="{strings:Resources Key=Play}" />
                    <MenuFlyoutItem
                        Command="{x:Bind ViewModel.PlayNextCommand}"
                        CommandParameter="{Binding}"
                        Icon="{ui:FontIcon FontFamily={StaticResource ScreenboxSymbolThemeFontFamily},
                                           Glyph={StaticResource PlayAddGlyph}}"
                        Text="{strings:Resources Key=PlayNext}" />
                    <MenuFlyoutSeparator />
                    <MenuFlyoutItem
                        Command="{x:Bind ViewModel.RemoveCommand}"
                        CommandParameter="{Binding}"
                        Icon="{ui:FontIcon Glyph=&#xE894;}"
                        Text="{strings:Resources Key=Remove}" />
                    <MenuFlyoutItem
                        Command="{x:Bind ViewModel.MoveItemUpCommand}"
                        CommandParameter="{Binding}"
                        Icon="{ui:FontIcon Glyph=&#xE74A;}"
                        Text="{strings:Resources Key=MoveUp}" />
                    <MenuFlyoutItem
                        Command="{x:Bind ViewModel.MoveItemDownCommand}"
                        CommandParameter="{Binding}"
                        Icon="{ui:FontIcon Glyph=&#xE74B;}"
                        Text="{strings:Resources Key=MoveDown}" />
                    <MenuFlyoutItem
                        Command="{StaticResource ShowPropertiesCommand}"
                        CommandParameter="{Binding}"
                        Icon="{ui:FontIcon Glyph=&#xE946;}"
                        Text="{strings:Resources Key=Properties}" />
                    <MenuFlyoutItem
                        Command="{x:Bind Common.OpenAlbumCommand}"
                        CommandParameter="{Binding Album}"
                        Icon="{ui:FontIcon Glyph=&#xE93C;}"
                        Text="{strings:Resources Key=ShowAlbum}"
                        Visibility="{Binding Album, Converter={StaticResource EmptyObjectToVisibilityConverter}}" />
                    <MenuFlyoutItem
                        Command="{x:Bind Common.OpenArtistCommand}"
                        CommandParameter="{Binding MainArtist}"
                        Icon="{ui:FontIcon Glyph=&#xE77B;}"
                        Text="{strings:Resources Key=ShowArtist}"
                        Visibility="{Binding MainArtist, Converter={StaticResource EmptyObjectToVisibilityConverter}}" />
                    <MenuFlyoutSeparator Visibility="{x:Bind Common.IsAdvancedModeEnabled}" />
                    <MenuFlyoutItem
                        CommandParameter="{Binding}"
                        Icon="{ui:SymbolIcon Symbol=Setting}"
                        Text="{strings:Resources Key=SetPlaybackOptions}"
                        Visibility="{x:Bind Common.IsAdvancedModeEnabled}">
                        <MenuFlyoutItem.Command>
                            <commands:SetPlaybackOptionsCommand PlayCommand="{x:Bind ViewModel.Playlist.PlaySingleCommand}" />
                        </MenuFlyoutItem.Command>
                    </MenuFlyoutItem>
                </MenuFlyout>
            </ResourceDictionary>
        </Grid.Resources>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" MinHeight="48" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <StackPanel
            x:Name="ActionButtonRow"
            Grid.Row="0"
            Margin="0,8,0,8"
            Padding="{x:Bind Padding, Mode=OneWay}"
            KeyTipPlacementMode="Bottom"
            Orientation="Horizontal">
            <Button
                x:Name="AddFilesButton"
                Margin="0,0,8,0"
                AccessKey="{strings:KeyboardResources Key=CommandAddOpenFilesKey}"
                AutomationProperties.Name="{strings:Resources Key=AddFiles}"
                Command="{x:Bind ViewModel.AddFilesCommand}"
                Visibility="Collapsed">
                <StackPanel Orientation="Horizontal">
                    <FontIcon
                        Margin="{StaticResource IconButtonStandardIconMargin}"
                        FontFamily="{StaticResource ScreenboxSymbolThemeFontFamily}"
                        Glyph="{StaticResource FolderOpenGlyph}" />
                    <TextBlock Margin="8,0,0,0" Text="{strings:Resources Key=AddFiles}" />
                </StackPanel>
            </Button>

            <Button
                x:Name="ClearButton"
                Margin="0,0,8,0"
                AccessKey="{strings:KeyboardResources Key=CommandClearKey}"
                AutomationProperties.Name="{x:Bind ClearButtonLabel.Text}"
                Command="{x:Bind ViewModel.Playlist.ClearCommand}"
                IsEnabled="{x:Bind ViewModel.HasItems, Mode=OneWay}"
                KeyTipPlacementMode="Bottom">
                <StackPanel Orientation="Horizontal">
                    <FontIcon
                        Margin="{StaticResource IconButtonStandardIconMargin}"
                        FontFamily="{StaticResource ScreenboxSymbolThemeFontFamily}"
                        Glyph="{StaticResource DeleteGlyph}" />
                    <TextBlock
                        x:Name="ClearButtonLabel"
                        Margin="8,0,0,0"
                        Text="{strings:Resources Key=Clear}" />
                </StackPanel>
            </Button>

            <ToggleButton
                x:Name="MultiSelectToggle"
                AccessKey="{strings:KeyboardResources Key=CommandMultiSelectKey}"
                AutomationProperties.Name="{x:Bind MultiSelectToggleLabel.Text}"
                IsChecked="{x:Bind ViewModel.EnableMultiSelect, Mode=TwoWay}"
                IsEnabled="{x:Bind ViewModel.HasItems, Mode=OneWay}"
                KeyTipPlacementMode="Bottom"
                XYFocusLeft="{x:Bind ClearButton}">
                <StackPanel Orientation="Horizontal">
                    <FontIcon
                        x:Name="MultiSelectToggleIcon"
                        Margin="{StaticResource IconButtonStandardIconMargin}"
                        Glyph="&#xE762;" />
                    <TextBlock
                        x:Name="MultiSelectToggleLabel"
                        Margin="8,0,0,0"
                        Text="{strings:Resources Key=Multiselect}" />
                </StackPanel>
            </ToggleButton>
        </StackPanel>

        <Grid
            x:Name="SelectionCommandRow"
            Grid.Row="0"
            Margin="{x:Bind Padding, Mode=OneWay}"
            ctAnimations:Implicit.HideAnimations="{StaticResource SelectionRowExitImplicitAnimation}"
            ctAnimations:Implicit.ShowAnimations="{StaticResource SelectionRowEntranceImplicitAnimation}"
            Visibility="Collapsed">
            <Border
                Background="{ThemeResource CardBackgroundFillColorDefaultBrush}"
                BorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                BorderThickness="{StaticResource CommandBarFlyoutBorderThemeThickness}"
                CornerRadius="{StaticResource OverlayCornerRadius}"
                Shadow="{StaticResource ElevationThemeShadow}"
                Translation="0,0,32" />
            <CommandBar
                x:Name="SelectionCommandBar"
                VerticalContentAlignment="Center"
                DefaultLabelPosition="Right"
                SizeChanged="CommandBar_OnSizeChanged">
                <CommandBar.Resources>
                    <StaticResource x:Key="CommandBarBackground" ResourceKey="ControlFillColorTransparentBrush" />
                    <StaticResource x:Key="CommandBarBackgroundOpen" ResourceKey="ControlFillColorTransparentBrush" />
                    <StaticResource x:Key="CommandBarBorderBrushOpen" ResourceKey="ControlFillColorTransparentBrush" />
                    <StaticResource x:Key="CommandBarHighContrastBorder" ResourceKey="ControlFillColorTransparentBrush" />

                    <!--  Reduce the width of the AppBarButton to 40 pixels when it is collapsed  -->
                    <Style BasedOn="{StaticResource DefaultAppBarButtonStyle}" TargetType="AppBarButton">
                        <Setter Property="Width" Value="44" />
                    </Style>
                </CommandBar.Resources>

                <AppBarButton
                    x:Name="PlayNextButton"
                    Command="{x:Bind ViewModel.PlaySelectedNextCommand}"
                    CommandParameter="{x:Bind PlaylistListView.SelectedItems}"
                    Icon="{ui:FontIcon FontFamily={StaticResource ScreenboxSymbolThemeFontFamily},
                                       Glyph={StaticResource PlayAddGlyph}}"
                    Label="{strings:Resources Key=PlayNext}" />
                <AppBarButton
                    x:Name="RemoveSelectedButton"
                    Command="{x:Bind ViewModel.RemoveSelectedCommand}"
                    CommandParameter="{x:Bind PlaylistListView.SelectedItems}"
                    Icon="{ui:FontIcon Glyph=&#xE894;}"
                    Label="{strings:Resources Key=Remove}">
                    <AppBarButton.KeyboardAccelerators>
                        <KeyboardAccelerator Key="Delete" />
                    </AppBarButton.KeyboardAccelerators>
                </AppBarButton>
                <AppBarButton
                    x:Name="MoveUpButton"
                    Command="{x:Bind ViewModel.MoveSelectedItemUpCommand}"
                    CommandParameter="{x:Bind PlaylistListView.SelectedItems}"
                    Icon="{ui:FontIcon Glyph=&#xE74A;}"
                    Label="{strings:Resources Key=MoveUp}" />
                <AppBarButton
                    x:Name="MoveDownButton"
                    Command="{x:Bind ViewModel.MoveSelectedItemDownCommand}"
                    CommandParameter="{x:Bind PlaylistListView.SelectedItems}"
                    Icon="{ui:FontIcon Glyph=&#xE74B;}"
                    Label="{strings:Resources Key=MoveDown}" />

                <CommandBar.Content>
                    <StackPanel Orientation="Horizontal">
                        <CheckBox
                            x:Name="SelectionCheckBox"
                            MinWidth="60"
                            Margin="10,0,4,0"
                            d:Content="11 items selected"
                            AutomationProperties.HelpText="{x:Bind system:Convert.ToString(SelectionCheckBox.Content), Mode=OneWay}"
                            AutomationProperties.Name="{x:Bind strings:Resources.SelectAll}"
                            Click="SelectionCheckBox_OnClick"
                            Content="{x:Bind strings:Resources.ItemsSelected(ViewModel.SelectionCount), Mode=OneWay}"
                            ToolTipService.ToolTip="{x:Bind GetSelectionCheckBoxToolTip(SelectionCheckBox.IsChecked), Mode=OneWay}" />
                        <TextBlock Padding="{x:Bind Path=SelectionCheckBox.Padding, Converter={StaticResource TopBottomThicknessFilterConverter}}" Text="•" />
                        <Button
                            Padding="4,5,4,5"
                            VerticalAlignment="Top"
                            controls:AcceleratorService.ToolTip="{x:Bind strings:Resources.ClearSelection}"
                            AutomationProperties.Name="{strings:Resources Key=ClearSelection}"
                            BorderThickness="0"
                            Command="{x:Bind ViewModel.ClearSelectionCommand}"
                            Content="{strings:Resources Key=Clear}">
                            <Button.Resources>
                                <!--  Override default brushes to make the Button background transparent and the foreground to use the accent color  -->
                                <ResourceDictionary>
                                    <ResourceDictionary.ThemeDictionaries>
                                        <ResourceDictionary x:Key="Default">
                                            <StaticResource x:Key="ButtonBackground" ResourceKey="ControlFillColorTransparentBrush" />
                                            <StaticResource x:Key="ButtonBackgroundPointerOver" ResourceKey="ControlFillColorTransparentBrush" />
                                            <StaticResource x:Key="ButtonBackgroundPressed" ResourceKey="ControlFillColorTransparentBrush" />
                                            <StaticResource x:Key="ButtonBackgroundDisabled" ResourceKey="ControlFillColorTransparentBrush" />
                                            <StaticResource x:Key="ButtonForeground" ResourceKey="AccentTextFillColorPrimaryBrush" />
                                            <StaticResource x:Key="ButtonForegroundPointerOver" ResourceKey="TextFillColorSecondaryBrush" />
                                            <StaticResource x:Key="ButtonForegroundPressed" ResourceKey="AccentTextFillColorTertiaryBrush" />
                                            <StaticResource x:Key="ButtonForegroundDisabled" ResourceKey="AccentTextFillColorDisabledBrush" />
                                        </ResourceDictionary>
                                        <ResourceDictionary x:Key="Light">
                                            <StaticResource x:Key="ButtonBackground" ResourceKey="ControlFillColorTransparentBrush" />
                                            <StaticResource x:Key="ButtonBackgroundPointerOver" ResourceKey="ControlFillColorTransparentBrush" />
                                            <StaticResource x:Key="ButtonBackgroundPressed" ResourceKey="ControlFillColorTransparentBrush" />
                                            <StaticResource x:Key="ButtonBackgroundDisabled" ResourceKey="ControlFillColorTransparentBrush" />
                                            <StaticResource x:Key="ButtonForeground" ResourceKey="AccentTextFillColorPrimaryBrush" />
                                            <StaticResource x:Key="ButtonForegroundPointerOver" ResourceKey="TextFillColorSecondaryBrush" />
                                            <StaticResource x:Key="ButtonForegroundPressed" ResourceKey="AccentTextFillColorTertiaryBrush" />
                                            <StaticResource x:Key="ButtonForegroundDisabled" ResourceKey="AccentTextFillColorDisabledBrush" />
                                        </ResourceDictionary>
                                        <ResourceDictionary x:Key="HighContrast">
                                            <StaticResource x:Key="ButtonBackground" ResourceKey="SystemControlTransparentBrush" />
                                            <StaticResource x:Key="ButtonBackgroundPointerOver" ResourceKey="SystemControlTransparentBrush" />
                                            <StaticResource x:Key="ButtonBackgroundPressed" ResourceKey="SystemControlTransparentBrush" />
                                            <StaticResource x:Key="ButtonBackgroundDisabled" ResourceKey="SystemControlTransparentBrush" />
                                            <StaticResource x:Key="ButtonForeground" ResourceKey="SystemColorHighlightColorBrush" />
                                            <StaticResource x:Key="ButtonForegroundPointerOver" ResourceKey="SystemColorButtonTextColorBrush" />
                                            <StaticResource x:Key="ButtonForegroundPressed" ResourceKey="SystemColorHighlightColorBrush" />
                                            <StaticResource x:Key="ButtonForegroundDisabled" ResourceKey="SystemColorGrayTextColorBrush" />
                                        </ResourceDictionary>
                                    </ResourceDictionary.ThemeDictionaries>
                                </ResourceDictionary>
                            </Button.Resources>
                            <Button.KeyboardAccelerators>
                                <KeyboardAccelerator Key="Escape" />
                            </Button.KeyboardAccelerators>
                        </Button>
                    </StackPanel>
                </CommandBar.Content>
            </CommandBar>
        </Grid>

        <ListView
            x:Name="PlaylistListView"
            Grid.Row="1"
            Margin="{StaticResource TopMediumMargin}"
            Padding="{x:Bind Padding, Mode=OneWay}"
            extensions:ListViewExtensions.ItemCornerRadius="{StaticResource MediaItemCornerRadius}"
            extensions:ListViewExtensions.ItemMargin="0,2,0,2"
            ui:ListViewExtensions.ItemContainerStretchDirection="Horizontal"
            ui:ScrollViewerExtensions.VerticalScrollBarMargin="{x:Bind Common.ScrollBarMargin, Mode=OneWay}"
            AllowDrop="True"
            CanDragItems="True"
            CanReorderItems="True"
            DragOver="PlaylistListView_OnDragOver"
            Drop="PlaylistListView_OnDrop"
            IsItemClickEnabled="True"
            ItemContainerStyle="{StaticResource MediaListViewItemStyle}"
            ItemsSource="{x:Bind ViewModel.Playlist.Items}"
            KeyboardAcceleratorPlacementMode="Hidden"
            SelectionChanged="PlaylistListView_OnSelectionChanged"
            SelectionMode="Extended">
            <ListView.Resources>
                <x:Boolean x:Key="ListViewItemSelectionIndicatorVisualEnabled">False</x:Boolean>
            </ListView.Resources>
            <ListView.ItemTemplate>
                <DataTemplate>
                    <controls:MediaListViewItem IsIconVisible="True" PlayCommand="{Binding DataContext.PlaySingleCommand, ElementName=PlaylistListView}" />
                </DataTemplate>
            </ListView.ItemTemplate>
            <ListView.Footer>
                <Border x:Name="Footer" Height="{x:Bind Common.FooterBottomPaddingHeight, Mode=OneWay}" />
            </ListView.Footer>
            <ListView.KeyboardAccelerators>
                <KeyboardAccelerator
                    Key="A"
                    Invoked="SelectDeselectAllKeyboardAccelerator_OnInvoked"
                    Modifiers="Control" />
            </ListView.KeyboardAccelerators>
            <interactivity:Interaction.Behaviors>
                <interactions:AlternatingListViewBehavior
                    AlternateBackground="{ThemeResource CardBackgroundFillColorDefaultBrush}"
                    AlternateBorderBrush="{ThemeResource CardStrokeColorDefaultBrush}"
                    AlternateBorderThickness="1" />
                <interactions:ListViewContextTriggerBehavior Flyout="{x:Bind ItemFlyout}" />
                <interactions:BringIntoViewWithOffsetBehavior FromBottom="{x:Bind Common.FooterBottomPaddingHeight, Mode=OneWay}" />
                <interactions:FocusOnItemClickBehavior />
            </interactivity:Interaction.Behaviors>
        </ListView>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="SelectionModes">
                <VisualState x:Name="Multiple">
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{x:Bind ViewModel.EnableMultiSelect, Mode=OneWay}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="SelectionCommandRow.Visibility" Value="Visible" />
                        <Setter Target="ActionButtonRow.Visibility" Value="Collapsed" />
                        <Setter Target="PlaylistListView.SelectionMode" Value="Multiple" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>

            <VisualStateGroup x:Name="LayoutGroup">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Compact" />

                <VisualState x:Name="Minimal">
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{x:Bind IsFlyout, Mode=OneWay}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="AddFilesButton.Visibility" Value="Visible" />
                        <Setter Target="ClearButton.(ToolTipService.ToolTip)" Value="{x:Bind ClearButtonLabel.Text}" />
                        <Setter Target="ClearButtonLabel.Visibility" Value="Collapsed" />
                        <Setter Target="MultiSelectToggle.(ToolTipService.ToolTip)" Value="{x:Bind MultiSelectToggleLabel.Text}" />
                        <Setter Target="MultiSelectToggleLabel.Visibility" Value="Collapsed" />
                        <Setter Target="PlayNextButton.LabelPosition" Value="Collapsed" />
                        <Setter Target="PlayNextButton.(ToolTipService.ToolTip)" Value="{x:Bind PlayNextButton.Label}" />
                        <Setter Target="RemoveSelectedButton.LabelPosition" Value="Collapsed" />
                        <Setter Target="PlaylistListView.(ui:ScrollViewerExtensions.VerticalScrollBarMargin)" Value="0" />
                        <Setter Target="Footer.Visibility" Value="Collapsed" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>

            <VisualStateGroup x:Name="FlowDirectionStates">
                <VisualState x:Name="LeftToRight" />

                <VisualState x:Name="RightToLeft">
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{x:Bind helpers:GlobalizationHelper.IsRightToLeftLanguage}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="MultiSelectToggleIcon.Glyph" Value="&#xEA98;" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>
</UserControl>
